import java.util.concurrent.*;

class Order {
    private final int id;
    public Order(int id) { this.id = id; }
    public int getId() { return id; }
}

class OrderProcessor implements Runnable {
    private final BlockingQueue<Order> orderQueue;
    private volatile boolean running = true;

    public OrderProcessor(BlockingQueue<Order> orderQueue) { this.orderQueue = orderQueue; }

    public void shutdown() { running = false; }

    @Override
    public void run() {
        while (running || !orderQueue.isEmpty()) {
            try {
                Order order = orderQueue.poll(1, TimeUnit.SECONDS);
                if (order != null) {
                    System.out.println("Processing Order: " + order.getId());
                    Thread.sleep(500);
                }
            } catch (InterruptedException e) { Thread.currentThread().interrupt(); }
        }
    }
}

public class OrderSystem {
    public static void main(String[] args) {
        BlockingQueue<Order> orderQueue = new LinkedBlockingQueue<>();
        OrderProcessor processor = new OrderProcessor(orderQueue);
        Thread processorThread = new Thread(processor);
        processorThread.start();

        for (int i = 1; i <= 5; i++) {
            orderQueue.add(new Order(i));
        }

        processor.shutdown();
    }
}
