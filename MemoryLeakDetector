import java.io.*;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;

public class MemoryLeakDetector {
    private static final List<byte[]> leakList = new ArrayList<>();

    public static void main(String[] args) {
        simulateMemoryLeak();
        monitorMemoryUsage();
        fixMemoryLeak();
    }

    private static void simulateMemoryLeak() {
        for (int i = 0; i < 100; i++) {
            leakList.add(new byte[1024 * 1024]); // Allocate 1MB chunks
        }
    }

    private static void monitorMemoryUsage() {
        Runtime runtime = Runtime.getRuntime();
        System.out.println("Total Memory: " + runtime.totalMemory());
        System.out.println("Free Memory: " + runtime.freeMemory());
    }

    private static void fixMemoryLeak() {
        WeakReference<List<byte[]>> weakRef = new WeakReference<>(leakList);
        leakList.clear();
        System.gc();
        System.out.println("Memory cleared. WeakRef available: " + (weakRef.get() != null));
    }
}
